/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.trantorinc.wellnesstracker.controller;

import com.trantorinc.wellnesstracker.model.Challenge;
import com.trantorinc.wellnesstracker.model.NewChallenge;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.server.ServerWebExchange;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;
import org.springframework.http.codec.multipart.Part;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-01-15T17:46:27.736648+05:30[Asia/Kolkata]")
@Validated
@Tag(name = "challenges", description = "the challenges API")
public interface ChallengesApi {

    /**
     * GET /challenges : List all challenges
     *
     * @return List of challenges (status code 200)
     */
    @Operation(
        operationId = "challengesGet",
        summary = "List all challenges",
        responses = {
            @ApiResponse(responseCode = "200", description = "List of challenges", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Challenge.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/challenges",
        produces = { "application/json" }
    )
    
    default Mono<ResponseEntity<Flux<Challenge>>> challengesGet(
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        for (MediaType mediaType : exchange.getRequest().getHeaders().getAccept()) {
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                String exampleString = "[ { \"challengeId\" : \"challengeId\", \"challengeName\" : \"challengeName\" }, { \"challengeId\" : \"challengeId\", \"challengeName\" : \"challengeName\" } ]";
                result = ApiUtil.getExampleResponse(exchange, MediaType.valueOf("application/json"), exampleString);
                break;
            }
        }
        return result.then(Mono.empty());

    }


    /**
     * POST /challenges : Create or join a wellness challenge
     *
     * @param newChallenge  (required)
     * @return Challenge created or joined (status code 201)
     */
    @Operation(
        operationId = "challengesPost",
        summary = "Create or join a wellness challenge",
        responses = {
            @ApiResponse(responseCode = "201", description = "Challenge created or joined")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/challenges",
        consumes = { "application/json" }
    )
    
    default Mono<ResponseEntity<Void>> challengesPost(
        @Parameter(name = "NewChallenge", description = "", required = true) @Valid @RequestBody Mono<NewChallenge> newChallenge,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        return result.then(newChallenge).then(Mono.empty());

    }

}
